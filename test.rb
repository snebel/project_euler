# Scratch work for number 44--still stuck

# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
# The first ten pentagonal numbers are: 1, 5, 12, 22, 35, 51, 70, 92, 117, 145
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
# 70 − 22 = 48, is not pentagonal.
# 22 + 70 = 92, 92 - 70 = 22
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and 
# difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
#
# My Notes
# - Math.sqrt(2p/3 + 1/36) + 1/6 = n
#   a number p is pentagonal if the above expression is an integer
# - pentagonals follow pattern odd, odd, even, even,...
# - Pentags have the following differences: 4, 7, 10, 13, 16, 19, 22, 25, 28

def generate_pentags_upto(limit, prev = 1, step = 4)
  if prev < limit
    puts prev
    generate_pentags_upto(limit, prev+step, step+3)
  end
end

#generate_pentags_upto(5000)

#return nth penagaonal
def pent(n)
  n*(3*n - 1) / 2
end

def pentagonal?(p)
  # ans = Math.sqrt(2*p/3.0 + 1/36.0) + 1/6.0
  # ans == ans.to_i 
  1.upto(p){ |n| return true if n*(3*n - 1)/2 == p }
  false
end

# [1, 5, 12, 22, 35, 51, 70, 92, 117, 145,176,210,247].each do |n|
#   print n
#   print pentagonal?(n)
#   puts
# end

pents = 1.upto(200).map{|n| pent(n)}

#puts pents

pents.each do |n1|
  pents -= [n1]
  #print pents
  #puts
  pents.each do |n2|
    if pentagonal?((n2 - n1).abs) && pentagonal?(n1 + n2)
      puts "#{n1+n2}, #{(n2-n1).abs}"
      break
    end
  end
end

