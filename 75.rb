# Given that L is the length of the wire, for how many values of L ≤ 1,500,000
# can exactly one integer sided right angle triangle be formed?
#
# My Notes:
# - We can use Euclid's formula for generating all primitive Pythagorean triplets:
#   Given a pair of positive integers m, n with m > n, we can form a triplet a, b, c
#   where a = m^2 - n^2, b = 2mn, c = m^2 + n^2. This triplet will be 'primitive' if
#   and only if gcd(m, n) is 1 and m - n is odd.
# - Given a primitive triplet a,b,c, we know a valid length of wire, l, is a + b + c, and
#   we know that every multiple of l below 1,500,000 will also be a valid wire length.
# - Since the longest side of a pythagorean triple cannot exceed half its perimeter, and
#   the longest side is generated by m^2 + n^2, we only need to check m upto √(lim/2)
# - We can keep track of the number of times each valid wire length comes up in a hash,
#   and select the lengths that come up exactly once.
# - Runs in about 1.4 seconds

def gcd(a, b)
  b == 0 ? a : gcd(b, a % b)
end

def count_pythags_upto(lim)
  wire_counts = Hash.new(0)
  for m in (2..Math.sqrt(lim/2))
    for n in (1..m-1)
      next unless (m - n) % 2 == 1 && gcd(m, n) == 1
      l = (m**2 - n**2) + (2*m*n) + (m**2 + n**2)
      1.upto(lim/l) {|k| wire_counts[k*l] += 1}
    end
  end
  wire_counts
end

p count_pythags_upto(1_500_000).count{|l, num| num == 1}