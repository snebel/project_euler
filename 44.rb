# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
# The first ten pentagonal numbers are: 1, 5, 12, 22, 35, 51, 70, 92, 117, 145
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
# 70 − 22 = 48, is not pentagonal.
# 22 + 70 = 92, 92 - 70 = 22
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and 
# difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
#
# My Notes
# - Rewriting the pentagonal formula, we get Math.sqrt(2p/3 + 1/36) + 1/6 = n,
#   where a number p is pentagonal if and only if n is an integer
# - Guessed that the first pair of pentagonals with this property would occur
#   somewhere in the first 5,000 pentagonal numbers. Runs in about 4 seconds

def pentag?(p)
  ans = Math.sqrt(2*p/3.0 + 1/36.0) + 1/6.0
  ans.round(12) == ans.round(1) # round b/c of floating-point precision errors
end

def find_pentag_pair
  pents = (1..5000).map{ |n| n*(3*n - 1) / 2 }
  pents.each do |n1|
    pents -= [n1]
    pents.each do |n2|
      return [n1, n2] if pentag?((n2 - n1).abs) && pentag?(n1 + n2)
    end
  end
end

puts find_pentag_pair
